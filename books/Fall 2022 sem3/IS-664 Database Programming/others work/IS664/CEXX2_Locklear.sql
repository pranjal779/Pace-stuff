/*
Class Exercise 2 Solution
Created By Me
Date: Oct 21, 2021
*/

USE imperial_defense;

DROP FUNCTION IF EXISTS buildCode;
DELIMITER //
CREATE FUNCTION buildCode(ID VARCHAR(20),SYS VARCHAR(20), FLTR varchar(20))
RETURNS VARCHAR(40)
DETERMINISTIC
	
BEGIN
	DECLARE CODE VARCHAR(40);

	
	SET CODE = SUBSTRING(ID,1,3);

	IF CODE LIKE 'FW_' THEN
		SET CODE = 'FW_101_';
	END IF;

	IF CODE LIKE 'FWx' THEN
		SET CODE = 'FWx001_101_';
	END IF;

	IF CODE LIKE 'FW-' THEN
		SET CODE = 'FW-111_101_';
	END IF;

	SET CODE = CONCAT(CODE,'88');
	SET CODE = CONCAT(CODE,SYS);
	SET CODE = CONCAT(CODE,'_');

	IF FLTR = 'Packet' THEN
		SET CODE = CONCAT(CODE,'PKT');		
	END IF;

	IF FLTR = 'Frame' THEN
		SET CODE = CONCAT(CODE,'FRM');
	END IF;

	RETURN CODE;

END //
DELIMITER ;

DROP PROCEDURE IF EXISTS firewallAccessCodes;
DELIMITER //
CREATE PROCEDURE firewallAccessCodes()

BEGIN
	-- CREATE UTILITY VARIABLES
	DECLARE F_ROWS INT; DECLARE I INT;

	-- CREATE CURSOR VARIABLES
	DECLARE ID VARCHAR(20); DECLARE SYS VARCHAR(20); DECLARE FLTR VARCHAR(20);
	DECLARE CODE VARCHAR(40);

	-- DECLARE CURSOR
	DECLARE FW_CURSOR CURSOR FOR SELECT * FROM firewall;
	

	-- TABLE
	DROP TABLE IF EXISTS firewallCodes;
	CREATE TABLE firewallCodes(
	FID INT AUTO_INCREMENT,
	IDNumber VARCHAR(20),
	SystemName VARCHAR(20),
	Filter ENUM('Packet','Frame'),
	FWCode VARCHAR(40),
	CONSTRAINT PK_FWC PRIMARY KEY(FID),
	CONSTRAINT UK_FWC UNIQUE KEY(IDNumber),
	CONSTRAINT FK_FWC FOREIGN KEY(IDNumber) REFERENCES firewall(IDNumber)
	);

	ALTER TABLE firewallCodes AUTO_INCREMENT = 76;


	-- OPEN CURSOR
	OPEN FW_CURSOR;
	SET F_ROWS = FOUND_ROWS();
	SET I = 0;
	-- FETCH CURSOR
	WHILE I < F_ROWS DO 
		FETCH FW_CURSOR INTO ID, SYS, FLTR;

		SET CODE = buildCode(ID,SYS,FLTR);
		INSERT INTO firewallCodes (IDNumber,SystemName,Filter,FWCode) VALUES(ID,SYS,FLTR,CODE);

		SET I = I + 1;
	END WHILE;

	-- CLOSE CURSOR
	CLOSE FW_CURSOR;

	-- DISPLAY
	SELECT * FROM firewallCodes;                                                                           


END //
DELIMITER ;

CALL firewallAccessCodes();
/*
DROP PROCEDURE componentSummary;
DELIMITER //
CREATE PROCEDURE componentSummary(N VARCHAR(20))

BEGIN
	-- CREATE UTILITY VARIABLES

	-- CREATE CURSOR VARIABLES

	-- DECLARE CURSOR


	-- OPEN CURSOR

	-- FETCH CURSOR

	-- CLOSE CURSOR


END //
DELIMITER ;

CALL componentSummary('');
*/