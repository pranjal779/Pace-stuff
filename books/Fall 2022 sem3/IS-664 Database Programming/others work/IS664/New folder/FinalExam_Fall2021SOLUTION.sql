/*
IS-664 DATABASE PROGRAMMING
FINAL EXAM SOLUTION FALL 2021
*/
USE imperial_defense;

DROP FUNCTION IF EXISTS resolveWID;
DELIMITER //
CREATE FUNCTION resolveWID(W VARCHAR(25))
RETURNS VARCHAR(25)
DETERMINISTIC

BEGIN
	DECLARE NV VARCHAR(25);
	IF REGEXP_LIKE(W,'~Device') THEN
		SET NV = REGEXP_REPLACE(W, '~Device', '');
	END IF;
	IF REGEXP_LIKE(W,'~Pad') THEN
		SET NV = REGEXP_REPLACE(W, '~Pad', '');
	END IF;
	IF REGEXP_LIKE(W,'~Terminal') THEN
		SET NV = REGEXP_REPLACE(W, '~Terminal', '');
	END IF;
	RETURN NV;

END //
DELIMITER ;

DROP FUNCTION IF EXISTS resolveWType;
DELIMITER //
CREATE FUNCTION resolveWType(W VARCHAR(25))
RETURNS VARCHAR(25)
DETERMINISTIC

BEGIN
	DECLARE NV VARCHAR(25);
	IF REGEXP_LIKE(W,'~Device') THEN
		SET NV = 'PORTABLE';
	END IF;
	IF REGEXP_LIKE(W,'~Pad') THEN
		SET NV = 'PORTABLE';
	END IF;
	IF REGEXP_LIKE(W,'~Terminal') THEN
		SET NV = 'FIXED';
	END IF;
	RETURN NV;

END //
DELIMITER ;

DROP FUNCTION IF EXISTS resolveNetBandwidth;
DELIMITER //
CREATE FUNCTION resolveNetBandwidth(N VARCHAR(25))
RETURNS INT
NOT DETERMINISTIC
READS SQL DATA

BEGIN
	DECLARE NV INT;	DECLARE P VARCHAR(25);
	SET P = CONCAT(N,'%');
	SELECT N_Bandwidth FROM enhancednetwork WHERE N_NAMETYPE LIKE P INTO NV;
	RETURN NV;

END //
DELIMITER ;

DROP FUNCTION IF EXISTS resolveNetStatus;
DELIMITER //
CREATE FUNCTION resolveNetStatus(N VARCHAR(25))
RETURNS VARCHAR(50)
NOT DETERMINISTIC
READS SQL DATA

BEGIN
	DECLARE NV VARCHAR(50);DECLARE P VARCHAR(25);
	SET P = CONCAT(N,'%');
	SELECT N_STATUS FROM enhancednetwork WHERE N_NAMETYPE LIKE P INTO NV;	
	IF REGEXP_LIKE(NV,'Offline') THEN
		SET NV = 'NET OFFLINE';
	END IF;
	IF REGEXP_LIKE(NV,'Online') THEN
		SET NV = 'NET ONLINE';
	END IF;	
	RETURN NV;

END //
DELIMITER ;



DROP FUNCTION IF EXISTS resolveSID;
DELIMITER //
CREATE FUNCTION resolveSID(S VARCHAR(25))
RETURNS VARCHAR(25)
DETERMINISTIC

BEGIN
	DECLARE NV VARCHAR(25);
	SET NV = REGEXP_REPLACE(S, '~.+', '');	
	RETURN NV;

END //
DELIMITER ;

DROP FUNCTION IF EXISTS resolveSCODE;
DELIMITER //
CREATE FUNCTION resolveSCODE(S VARCHAR(25))
RETURNS VARCHAR(25)
DETERMINISTIC

BEGIN
	DECLARE NV VARCHAR(25);DECLARE P VARCHAR(25);
	SET P = CONCAT(S,'%');
	SELECT S_NAMEID FROM enhancedsite WHERE S_NAMEID LIKE P INTO NV;
	SET NV = REGEXP_REPLACE(NV, '.+~', 'CODE: ');	
	RETURN NV;

END //
DELIMITER ;

DROP FUNCTION IF EXISTS resolveWACCESS;
DELIMITER //
CREATE FUNCTION resolveWACCESS(W VARCHAR(25))
RETURNS VARCHAR(25)
DETERMINISTIC

BEGIN
	DECLARE NV VARCHAR(25); 
	SET NV = REGEXP_REPLACE(W, '~.+', '');	
	SET NV = CONCAT('Password: ',NV);
	RETURN NV;

END //
DELIMITER ;

SELECT resolveWACCESS('AX-206~NOT SECURED');

DROP FUNCTION IF EXISTS resolveSCOORDS;
DELIMITER //
CREATE FUNCTION resolveSCOORDS(S VARCHAR(25))
RETURNS JSON
NOT DETERMINISTIC
READS SQL DATA

BEGIN
	DECLARE X INT; DECLARE Y INT;
	DECLARE CJ JSON;DECLARE P VARCHAR(25);
	SET P = CONCAT(S,'%');
	SELECT S_X FROM enhancedsite WHERE S_NAMEID LIKE P INTO X;
	SELECT S_Y FROM enhancedsite WHERE S_NAMEID LIKE P INTO Y;
	SET CJ = JSON_OBJECT('X Coordinate:',X,'Y Coordinate:',Y);	
	RETURN CJ;

END //
DELIMITER ;

DROP FUNCTION IF EXISTS resolveWSECURITY;
DELIMITER //
CREATE FUNCTION resolveWSECURITY(W VARCHAR(25))
RETURNS VARCHAR(25)
DETERMINISTIC

BEGIN
	DECLARE NV VARCHAR(25);
	IF REGEXP_LIKE(W,'~NOT SECURED') THEN
		SET NV = 'PLAIN TEXT WIDGET';
	END IF;
	IF REGEXP_LIKE(W,'~SECURED') THEN
		SET NV = 'ENCRYPTED WIDGET';
	END IF;	
	
	RETURN NV;

END //
DELIMITER ;



DROP PROCEDURE IF EXISTS widgetListAnaylsis;
DELIMITER //
CREATE PROCEDURE widgetListAnaylsis(W JSON)

BEGIN

	-- UTILITY VARIABLES
	DECLARE I INT; DECLARE FROWS INT;
	DECLARE J INT; DECLARE JL INT;

	-- FUNCTION VARIABLES
	DECLARE NEW_ID VARCHAR(25); DECLARE NEW_TYPE VARCHAR(25);
	DECLARE NEW_BW INT;	DECLARE NEW_NSTATUS VARCHAR(25);
	DECLARE NEW_SITEID VARCHAR(25);	DECLARE NEW_SITECODE VARCHAR(25);
	DECLARE NEW_SITECOORDS JSON; DECLARE NEW_PASSWORD VARCHAR(25);
	DECLARE NEW_SECURITY VARCHAR(25);

	-- CURSOR VARIABLES
	DECLARE EW_1 INT; DECLARE EW_2 VARCHAR(50); DECLARE EW_3 VARCHAR(50);
	DECLARE EW_4 VARCHAR(50); DECLARE EW_5 VARCHAR(50);

	-- CURSOR
	DECLARE E_CURSOR CURSOR FOR SELECT * 
	FROM enhancedwidget 
	WHERE W_IDTYPE = JSON_EXTRACT(W,'$[0]') 
	OR W_IDTYPE = JSON_EXTRACT(W,'$[1]') 
	OR W_IDTYPE = JSON_EXTRACT(W,'$[2]');
	
	
	-- TABLE
	DROP TABLE IF EXISTS widgetAnaylsis_1;
	CREATE TABLE widgetAnaylsis_1(
	W_COUNT INT,
	W_ID VARCHAR(50),
	W_TYPE ENUM('PORTABLE','FIXED'),
	W_SECURITY ENUM('PLAIN TEXT WIDGET', 'ENCRYPTED WIDGET'),
	W_PW VARCHAR(50),
	W_NETWORK VARCHAR(50),
	N_BANDWIDTH INT,
	N_BANDWIDTH_S DECIMAL(10,2) GENERATED ALWAYS AS (N_BANDWIDTH * 0.92) STORED,
	N_BANDWIDTH_T DECIMAL(10,2) GENERATED ALWAYS AS (N_BANDWIDTH_S * 0.62) STORED,
	N_STATUS ENUM('NET ONLINE', 'NET OFFLINE'),		
	CONSTRAINT PK_WA1 PRIMARY KEY(W_ID),
	CONSTRAINT FK_WA1 FOREIGN KEY(W_ID) REFERENCES widget(WID)
	);

	DROP TABLE IF EXISTS widgetAnaylsis_2;
	CREATE TABLE widgetAnaylsis_2(
	W_COUNT INT,
	W_ID VARCHAR(50),
	W_TYPE ENUM('PORTABLE','FIXED'),
	W_SECURITY ENUM('PLAIN TEXT WIDGET', 'ENCRYPTED WIDGET'),
	W_PW VARCHAR(50),
	W_SITE_ID VARCHAR(50),
	W_SITE_CODE VARCHAR(50),
	W_SITE_COORDS JSON,
	
	CONSTRAINT PK_WA2 PRIMARY KEY(W_ID),
	CONSTRAINT FK_WA2 FOREIGN KEY(W_ID) REFERENCES widget(WID)
	);
	
	-- OPEN CURSOR
	OPEN E_CURSOR;
	SET FROWS = FOUND_ROWS();
	SET I = 0;

	-- FETCH CURSOR
	WHILE I < FROWS DO
			FETCH E_CURSOR INTO EW_1,EW_2,EW_3,EW_4,EW_5;
			SET NEW_ID = resolveWID(EW_2);
			SET NEW_TYPE = resolveWType(EW_2);
			SET NEW_BW = resolveNetBandwidth(EW_3);
			SET NEW_NSTATUS = resolveNetStatus(EW_3);
			SET NEW_SITEID = resolveSID(EW_4);
			SET NEW_SITECODE = resolveSCODE(EW_4);
			SET NEW_SITECOORDS = resolveSCOORDS(EW_4);
			SET NEW_PASSWORD = resolveWACCESS(EW_5);
			SET NEW_SECURITY = resolveWSECURITY(EW_5);

			INSERT INTO widgetAnaylsis_1(W_COUNT,W_ID,W_TYPE,W_SECURITY,W_PW,
				W_NETWORK,N_BANDWIDTH,N_STATUS) 
			VALUES(EW_1,NEW_ID,NEW_TYPE,NEW_SECURITY,NEW_PASSWORD,EW_3,NEW_BW,NEW_NSTATUS);

			INSERT INTO widgetAnaylsis_2 VALUES(EW_1,NEW_ID,NEW_TYPE,NEW_SECURITY,NEW_PASSWORD,
				NEW_SITEID,NEW_SITECODE,NEW_SITECOORDS);

		 SET I = I + 1;
	END WHILE;	

	-- CLOSE CURSOR
	CLOSE E_CURSOR;

	-- DISPLAY TABLE
	SELECT * FROM widgetAnaylsis_1;
	SELECT * FROM widgetAnaylsis_2;

END //
DELIMITER ;

CALL widgetListAnaylsis(JSON_ARRAY('WDG#1~Device','WDG#10~Pad','WDG#100~Pad'));
CALL widgetListAnaylsis(JSON_ARRAY('WDG#152~Pad','WDG#17~Terminal','WDG#158~Terminal'));
