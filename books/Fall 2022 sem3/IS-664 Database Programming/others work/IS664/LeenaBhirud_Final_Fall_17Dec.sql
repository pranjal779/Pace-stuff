/*
FINAL EXAM
IS 664 DATABASE PROGRAMMING
LEENA BHIRUD - FALL 2021
*/

USE IMPERIAL_DEFENSE;


-- TO DISPLAY secure access in widget analysis table
DROP FUNCTION IF EXISTS secure_access;
DELIMITER //
CREATE FUNCTION secure_access(n_access VARCHAR(25))
RETURNS VARCHAR(25)
DETERMINISTIC

BEGIN
	DECLARE CTEXT VARCHAR(25);
	    IF  n_access like '%SECURED' then 
		    SET CTEXT = 'ENCRYPTED WIDGET';
		END IF;
		IF n_access like '%NOT%' then
		    SET CTEXT = 'PLAIN TEXT WIDGET';
	     END IF ;	    	
	RETURN CTEXT;

END //
DELIMITER ;


-- to calculate X - Y coordinates 
DROP FUNCTION IF EXISTS sitecoord;
DELIMITER //
CREATE FUNCTION sitecoord(n_x int, n_y int)
RETURNS JSON
DETERMINISTIC

BEGIN
	DECLARE CTEXT json; 
     set ctext = json_object("X Coordinate: ",n_x, "Y Coordinate: ",n_y);
	RETURN CTEXT;

END //
DELIMITER ;

-- TO DISPLAY WIDGET ID
DROP FUNCTION IF EXISTS WID;
DELIMITER //
CREATE FUNCTION WID(N_IDTYPE VARCHAR(25))
RETURNS VARCHAR(50)
DETERMINISTIC

BEGIN
	DECLARE CTEXT VARCHAR(50);
	      SET CTEXT = SUBSTRING_INDEX(N_IDTYPE,'~',1);		    	
	RETURN CTEXT;

END //
DELIMITER ;

-- TO DISPLAY WIDGET TYPE 
DROP FUNCTION IF EXISTS WTYPE;
DELIMITER //
CREATE FUNCTION WTYPE(N_IDTYPE VARCHAR(25))
RETURNS VARCHAR(10)
DETERMINISTIC

BEGIN
	DECLARE CTEXT VARCHAR(10);
	     
		    IF N_IDTYPE LIKE '%Pad' or  N_IDTYPE LIKE '%Device' then
		    SET CTEXT = 'PORTABLE';
		    else 
		    SET CTEXT = 'FIXED';
		    END IF ;	
	RETURN CTEXT;

END //
DELIMITER ;

-- TO DISPLAY NETSTATUS 
DROP FUNCTION IF EXISTS NETSTATS;
DELIMITER //
CREATE FUNCTION netstats(N_STATUS VARCHAR(25))
RETURNS VARCHAR(25)
DETERMINISTIC

BEGIN
	DECLARE CTEXT VARCHAR(25);
	     
		    IF N_STATUS LIKE '%ONLINE%' THEN 
		    SET CTEXT = 'NET ONLINE';
		    ELSE 
		    SET CTEXT = 'NET OFFLINE';
		    END IF ;	
	RETURN CTEXT;

END //
DELIMITER ;


DROP PROCEDURE IF EXISTS ENHANCEDWIDGETBUILDER;
DELIMITER //
CREATE PROCEDURE ENHANCEDWIDGETBUILDER()

BEGIN
		-- UTILITY VARIABLES
		DECLARE I INT; DECLARE COUNT INT; DECLARE COUNTER INT;		
		DECLARE WIDSECURE VARCHAR(25); DECLARE WIDTYPE VARCHAR(40); 

		-- CURSOR VARIABLES
		DECLARE N_WID VARCHAR(25); DECLARE N_WTYPE VARCHAR(8);
		DECLARE N_ASSIGNEDTO VARCHAR(25); DECLARE N_LOCATION VARCHAR(25); DECLARE N_ACCESS VARCHAR(25);
		DECLARE N_SECURE INT;  DECLARE N_USER JSON; 		
		

		-- DECLARE CURSOR
		DECLARE FW_CURSOR CURSOR FOR SELECT	* FROM WIDGET;

        -- TABLE CREATION 
		DROP TABLE IF EXISTS ENHANCEDWIDGET;
		CREATE TABLE ENHANCEDWIDGET(
		W_COUNT INT NOT NULL AUTO_INCREMENT ,
		W_IDTYPE VARCHAR(25),
		W_NETWORK VARCHAR(25),
		W_SITE    VARCHAR(25),
		W_ACCESS VARCHAR(25),
		CONSTRAINT PK_WCNT PRIMARY KEY(W_COUNT));

		-- OPEN CURSOR
		OPEN FW_CURSOR;
		SET COUNT = FOUND_ROWS();
		SET I = 0;

		-- FETCH CURSOR
		WHILE I < COUNT DO
			FETCH FW_CURSOR INTO N_WID, N_WTYPE, N_ASSIGNEDTO, N_LOCATION, N_ACCESS, N_SECURE, N_USER;
                
			SET WIDTYPE = CONCAT_WS('~',N_WID,N_WTYPE);    
			IF N_SECURE = 0 THEN 
			   SET WIDSECURE = CONCAT_WS('~',N_ACCESS,'NOT SECURED');
			ELSE
			   SET WIDSECURE = CONCAT_WS('~',N_ACCESS,'SECURED');
			END IF;  
			
            INSERT INTO ENHANCEDWIDGET(W_IDTYPE, W_NETWORK,W_SITE,W_ACCESS)
                                VALUES(WIDTYPE, N_ASSIGNEDTO,N_LOCATION,WIDSECURE ); 
                           
			SET I = I + 1;
		END WHILE;

			-- CLOSE CURSOR
			CLOSE FW_CURSOR;
		
END //
DELIMITER ;


DROP PROCEDURE IF EXISTS ENHANCEDSITEBUILDER;
DELIMITER //
CREATE PROCEDURE ENHANCEDSITEBUILDER()

BEGIN
		-- UTILITY VARIABLES
		DECLARE I INT; DECLARE COUNT INT; DECLARE COUNTER INT;		
		DECLARE SITENAME VARCHAR(30); DECLARE SITE_STATUS VARCHAR(25); 

		-- CURSOR VARIABLES
		DECLARE N_SID VARCHAR(25); DECLARE N_SNAME VARCHAR(25); DECLARE N_STATUS VARCHAR(10); DECLARE N_XCOORD VARCHAR(5);
		DECLARE N_YCOORD VARCHAR(5);		
		

		-- DECLARE CURSOR
		DECLARE FW_CURSOR CURSOR FOR SELECT	* FROM SITE ;

        -- TABLE CREATION 
		DROP TABLE IF EXISTS ENHANCEDSITE;
		CREATE TABLE ENHANCEDSITE(
		S_COUNT INT NOT NULL AUTO_INCREMENT ,
		S_NAMEID VARCHAR(25),
		S_STATUS VARCHAR(25),
		S_X INT,
		S_Y INT,
		CONSTRAINT PK_WCNT PRIMARY KEY(S_COUNT));

		-- OPEN CURSOR
		OPEN FW_CURSOR;
		SET COUNT = FOUND_ROWS();
		SET I = 0;

		-- FETCH CURSOR
		WHILE I < COUNT DO
			FETCH FW_CURSOR INTO N_SNAME, N_SID, N_STATUS, N_XCOORD, N_YCOORD;
                
			SET SITENAME = CONCAT_WS('~',N_SNAME,N_SID);    
			SET SITE_STATUS = CONCAT('SITE IS ',N_STATUS);
						
            INSERT INTO ENHANCEDSITE(S_NAMEID, S_STATUS, S_X, S_Y)
                                VALUES(SITENAME, SITE_STATUS,N_XCOORD,N_YCOORD ); 
                           
			SET I = I + 1;
		END WHILE;

			-- CLOSE CURSOR
			CLOSE FW_CURSOR;

END //
DELIMITER ;



DROP PROCEDURE IF EXISTS ENHANCEDNETWORKBUILDER;
DELIMITER //
CREATE PROCEDURE ENHANCEDNETWORKBUILDER()

BEGIN
		-- UTILITY VARIABLES
		DECLARE I INT; DECLARE COUNT INT; DECLARE COUNTER INT;	
		DECLARE NAMETYPE VARCHAR(40); DECLARE NETSTAT VARCHAR(30);	

		-- CURSOR VARIABLES
		DECLARE N_NETNAME VARCHAR(25); DECLARE N_NETTYPE VARCHAR(6); DECLARE N_BW DECIMAL(10,2);
		DECLARE N_OPTIMUMBW DECIMAL(10,2); DECLARE N_MAXBW DECIMAL(10,2); DECLARE N_MINBW DECIMAL(10,2);
		DECLARE N_CSWITCHED TINYINT(1); DECLARE N_NETSTATUS VARCHAR(10); DECLARE N_WID VARCHAR(25); DECLARE N_WTYPE VARCHAR(8);
		DECLARE N_LOCATION VARCHAR(25); DECLARE N_SECURE TINYINT(1) ;	
		

		-- DECLARE CURSOR
		DECLARE FW_CURSOR CURSOR FOR SELECT	NETNAME, NETTYPE, BANDWIDTH, NETSTATUS FROM NETWORK ;

        -- TABLE CREATION 
		DROP TABLE IF EXISTS ENHANCEDNETWORK;
		CREATE TABLE ENHANCEDNETWORK(
		N_COUNT INT NOT NULL AUTO_INCREMENT ,
		N_NAMETYPE VARCHAR(25),
		N_BANDWIDTH INT,
		N_STATUS 	VARCHAR(25),
		CONSTRAINT PK_NCNT PRIMARY KEY(N_COUNT));

		-- OPEN CURSOR
		OPEN FW_CURSOR;
		SET COUNT = FOUND_ROWS();
		SET I = 0;

		-- FETCH CURSOR
		WHILE I < COUNT DO
			FETCH FW_CURSOR INTO N_NETNAME, N_NETTYPE,N_BW, N_NETSTATUS;
                
			SET NAMETYPE = CONCAT_WS('~',N_NETNAME,N_NETTYPE);    
			SET NETSTAT = CONCAT('NETWORK IS ',N_NETSTATUS);
						
            INSERT INTO ENHANCEDNETWORK(N_NAMETYPE,N_BANDWIDTH,N_STATUS)
                                VALUES(NAMETYPE,N_BW,NETSTAT); 
                           
			SET I = I + 1;
		END WHILE;

			-- CLOSE CURSOR
			CLOSE FW_CURSOR;

END //
DELIMITER ;


 


DROP PROCEDURE IF EXISTS WIDGETLISTANAYLSIS;
DELIMITER //
CREATE PROCEDURE WIDGETLISTANAYLSIS(INP_A JSON)

BEGIN
		-- UTILITY VARIABLES
		DECLARE I INT; DECLARE COUNT INT; DECLARE COUNTER INT;	
		DECLARE NAMETYPE VARCHAR(40); DECLARE NETSTAT VARCHAR(30);	


		-- CURSOR VARIABLES
		DECLARE N_IDTYPE VARCHAR(25); DECLARE N_NETWORK VARCHAR(25); DECLARE N_WCNT INT;
		DECLARE N_SITE VARCHAR(25); DECLARE N_ACCESS VARCHAR(25) ;	DECLARE WTYPE VARCHAR(10);
		DECLARE N_NETNAME VARCHAR(25); DECLARE N_BW DECIMAL(10,2); DECLARE n_stat varchar(20);
		DECLARE WID VARCHAR(50); DECLARE pw varchar(50); declare sec_access varchar(25);
		Declare w_access2 varchar(20);
		declare coord json;
		declare n_nid varchar(25); declare n_acc2 varchar(50); declare n_x int ; declare n_y int ;

		-- DECLARE CURSOR
		 DECLARE FW_CURSOR CURSOR FOR SELECT W.W_COUNT,W.W_IDTYPE,W.W_NETWORK,W.W_SITE,substring_index(W.W_ACCESS,'~',1) as w_access,
		                               w.w_access as w_access2,
		                               N.N_BANDWIDTH,N.N_STATUS, substring_index(s.S_NAMEID,'~',1) as s_nameid,
		                               substring_index(s.S_NAMEID,'~',-1) as w_acc2,
		                               s.s_x,s.s_y
		                              FROM ENHANCEDWIDGET W INNER JOIN ENHANCEDNETWORK N
		                              ON W.W_NETWORK = SUBSTRING_INDEX(N_NAMETYPE,'~',1)
		                              INNER JOIN ENHANCEDSITE s 
		                              on w.w_site = SUBSTRING_INDEX(S_NAMEID,'~',1)
		                              WHERE W.W_IDTYPE = JSON_EXTRACT(INP_A,'$[0]') 
		                              OR W.W_IDTYPE = JSON_EXTRACT(INP_A,'$[1]') 
		                              OR W.W_IDTYPE = JSON_EXTRACT(INP_A,'$[2]');
		                              

		
        -- TABLE CREATION WIDGETANAYLSIS_1
		DROP TABLE IF EXISTS WIDGETANAYLSIS_1;
		CREATE TABLE WIDGETANAYLSIS_1(
		W_COUNT INT ,
		W_ID VARCHAR(50) NOT NULL,	
		W_TYPE ENUM('PORTABLE','FIXED'),
		W_SECURITY ENUM('PLAIN TEXT WIDGET','ENCRYPTED WIDGET'),
		W_PW VARCHAR(50),
		W_NETWORK VARCHAR(50),
		N_BANDWIDTH INT,
		N_BANDWIDTH_S DECIMAL(10,2) GENERATED ALWAYS AS ( (N_BANDWIDTH/100) *92) STORED,
		N_BANDWIDTH_T DECIMAL(10,2) GENERATED ALWAYS AS ( (N_BANDWIDTH_s/100) *62) STORED,
		N_STATUS ENUM('NET ONLINE','NET OFFLINE') ,
		CONSTRAINT PK_WID PRIMARY KEY(W_ID));

		 -- TABLE CREATION WIDGETANAYLSIS_2
		DROP TABLE IF EXISTS WIDGETANAYLSIS_2;
		CREATE TABLE WIDGETANAYLSIS_2(
		W_COUNT INT ,
		W_ID VARCHAR(50) NOT NULL,	
		W_TYPE ENUM('PORTABLE','FIXED'),
		W_SECURITY ENUM('PLAIN TEXT WIDGET','ENCRYPTED WIDGET'),
		W_PW VARCHAR(50),
		W_SITE_ID VARCHAR(50),
		W_SITE_CODE VARCHAR(50),
		W_SITE_COORDS JSON,
		CONSTRAINT PK_WID PRIMARY KEY(W_ID));

		-- OPEN CURSOR
		OPEN FW_CURSOR;
		SET COUNT = FOUND_ROWS();
		SET I = 0;

		-- FETCH CURSOR
		WHILE I < COUNT DO
			FETCH FW_CURSOR INTO  N_WCNT, N_IDTYPE, N_NETWORK, N_SITE, N_ACCESS,w_access2,N_BW, n_stat, n_nid ,n_acc2, n_x, n_y;
             
            SET WTYPE = WTYPE(N_IDTYPE);
            SET WID  = WID(N_IDTYPE);
            SET PW   = CONCAT('PASSWORD: ',N_ACCESS);
            set netstat = NETSTATS(n_stat);
            set sec_access = secure_access(w_access2);
            set coord = sitecoord(n_x, n_y );
 
            INSERT INTO WIDGETANAYLSIS_1(W_COUNT, W_ID ,W_TYPE,W_SECURITY,W_PW,W_NETWORK,N_BANDWIDTH,N_STATUS)
                                   VALUES(N_WCNT,WID,WTYPE,sec_access,PW,N_NETWORK,N_BW,netstat);                                             
             INSERT INTO WIDGETANAYLSIS_2(W_COUNT, W_ID ,W_TYPE,W_SECURITY,W_PW,W_SITE_ID,W_SITE_CODE,W_SITE_COORDS)
                                   VALUES(N_WCNT,WID,WTYPE,sec_access,PW,n_nid,concat('CODE: ',n_acc2),coord);                                   
                         
			SET I = I + 1;
		END WHILE;

			-- CLOSE CURSOR
			CLOSE FW_CURSOR; 


			-- DISPLAY TABLE 
           SELECT * FROM WIDGETANAYLSIS_1;
           SELECT * FROM WIDGETANAYLSIS_2;


END //
DELIMITER ;


CALL ENHANCEDWIDGETBUILDER();
CALL ENHANCEDSITEBUILDER();
CALL ENHANCEDNETWORKBUILDER();
CALL WIDGETLISTANAYLSIS(JSON_ARRAY('WDG#1~Device','WDG#10~Pad','WDG#100~Pad'));
CALL widgetListAnaylsis(JSON_ARRAY('WDG#152~Pad','WDG#17~Terminal','WDG#158~Terminal'));